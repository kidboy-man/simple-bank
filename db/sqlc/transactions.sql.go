// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  "currency",
  "amount",
  "kind",
  "from_account_id",
  "to_account_id"
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, currency, amount, kind, from_account_id, to_account_id, created_at
`

type CreateTransactionParams struct {
	Currency      string        `json:"currency"`
	Amount        int64         `json:"amount"`
	Kind          int64         `json:"kind"`
	FromAccountID sql.NullInt64 `json:"from_account_id"`
	ToAccountID   sql.NullInt64 `json:"to_account_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Currency,
		arg.Amount,
		arg.Kind,
		arg.FromAccountID,
		arg.ToAccountID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Currency,
		&i.Amount,
		&i.Kind,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, currency, amount, kind, from_account_id, to_account_id, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Currency,
		&i.Amount,
		&i.Kind,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, currency, amount, kind, from_account_id, to_account_id, created_at FROM transactions
ORDER BY id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.Amount,
			&i.Kind,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
