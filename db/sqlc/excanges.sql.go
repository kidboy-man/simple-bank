// Code generated by sqlc. DO NOT EDIT.
// source: excanges.sql

package db

import (
	"context"
)

const createExchange = `-- name: CreateExchange :one
INSERT INTO exchanges (
  "from_currency",
  "to_currency",
  "rate"
) VALUES (
  $1, $2, $3
)
RETURNING from_currency, to_currency, rate, created_at
`

type CreateExchangeParams struct {
	FromCurrency string `json:"from_currency"`
	ToCurrency   string `json:"to_currency"`
	Rate         string `json:"rate"`
}

func (q *Queries) CreateExchange(ctx context.Context, arg CreateExchangeParams) (Exchange, error) {
	row := q.db.QueryRowContext(ctx, createExchange, arg.FromCurrency, arg.ToCurrency, arg.Rate)
	var i Exchange
	err := row.Scan(
		&i.FromCurrency,
		&i.ToCurrency,
		&i.Rate,
		&i.CreatedAt,
	)
	return i, err
}

const getExchangeFromTo = `-- name: GetExchangeFromTo :one
SELECT from_currency, to_currency, rate, created_at FROM exchanges
WHERE from_currency = $1 AND to_currency = $2 LIMIT 1
`

type GetExchangeFromToParams struct {
	FromCurrency string `json:"from_currency"`
	ToCurrency   string `json:"to_currency"`
}

func (q *Queries) GetExchangeFromTo(ctx context.Context, arg GetExchangeFromToParams) (Exchange, error) {
	row := q.db.QueryRowContext(ctx, getExchangeFromTo, arg.FromCurrency, arg.ToCurrency)
	var i Exchange
	err := row.Scan(
		&i.FromCurrency,
		&i.ToCurrency,
		&i.Rate,
		&i.CreatedAt,
	)
	return i, err
}

const listExchanges = `-- name: ListExchanges :many
SELECT from_currency, to_currency, rate, created_at FROM exchanges
ORDER BY from_currency, to_currency ASC
`

func (q *Queries) ListExchanges(ctx context.Context) ([]Exchange, error) {
	rows, err := q.db.QueryContext(ctx, listExchanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exchange
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(
			&i.FromCurrency,
			&i.ToCurrency,
			&i.Rate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
