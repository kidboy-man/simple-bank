// Code generated by sqlc. DO NOT EDIT.
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  "full_name",
  "email",
  "phone_number",
  "pin"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, full_name, email, phone_number, pin, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	FullName    string `json:"full_name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Pin         string `json:"pin"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.Pin,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Pin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, full_name, email, phone_number, pin, created_at, updated_at, deleted_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Pin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, full_name, email, phone_number, pin, created_at, updated_at, deleted_at FROM accounts
ORDER BY id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.Pin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
